%************************************************************************%
%************************************************************************%
%---                        VERIFICATION                              ---%
%************************************************************************%
%************************************************************************%

%--- Internal function : possibly1 --%
def possibly1(S,x) : Reachable(S, projection(intersection(x, constraint(S)), state_var(S)));

%--- Possibly ---%
def POSSIBLE(S,prop) : possibly1(S,prop);
def Possible(S,prop) : possibly1(S,prop);


% Always : returns "true" if prop is always true  %
def Always(S,prop) : notb(possibly1(S, complement(prop)));


% Never: retuns "true" if prop is never true%
def Never(S,prop) : notb(possibly1(S,prop));


% Attractivity: returns "true" whenever all the trajectories initialized in V(prop1) %
% reach the  set of states V(p2).% 
def Attract(S,prop1,prop2) : notb(subset(prop1, greatest_c_inv(S, complement(prop2))));

% Invariant control: returns true if we can pilot the system in a way that prop is true%
def C_Invariant(S,prop) : Invariant_under_control(S,prop);
	
	
%*********************%
%     CTL Logic       %
%*********************%

%--- Boolean Operators %

et: intersection;
ou: union;
non: complement;
def imp(p1,p2) : ou(non(p1), p2);

%--- next ---%

% There exist a successor such that P holds %
def EX(p) : some_succ(S, p);

% All the  successors verifies P %
def AX(p) : all_succ(S, p);


%--- until ---%

% It exists a path on which P1 is true until P2 becomes true % 
def EU(p1,p2) : loop z=union(z, intersection(p1, EX(z))) init p2;

% A[p1 U p2], For all possible  paths,  P1 is true until P2 becomes true % 
def AU(p1,p2) : loop z=union(z, intersection(p1, AX(z))) init p2;

%--- always ---%

%There always a path such that p is true%
def EG(p) : greatest_c_inv(S, p);

% whatever the behavior of S, p is true % 
def AG(p) : greatest_inv(S, p);

%--- eventually ---%

% There exist a finite path such that p will be true% 
def EF(p) : loop z=union(z, EX(z)) init p;

% whatever the behavior of S, p will eventually becomes true%
% in a finite number of transitions %

def AF(p) : loop z=union(z, AX(z)) init p;

%--- verification ---%
def CHECK_CTL_FORMULAE(p) : subset(initial(S), p);

%--- Possible / Certain : e est une liste d'equations ---%

def possible(e) : projection(intersection(constraint(S), gen(e)), etats);

def certain(e) : coefx(union(complement(constraint(S)), gen(e)), etats);
